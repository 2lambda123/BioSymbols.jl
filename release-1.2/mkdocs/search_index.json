{
    "docs": [
        {
            "location": "/", 
            "text": "BioSymbols.jl\n\n\n\n\nDescription\n\n\nBioSymbols.jl provides types for Julia which act as values representing nucleic acids and amino acids for bioinformatics and computational biology scripts and packages.  These types are compatible with other packages in the BioJulia software ecosystem.\n\n\n\n\nInstallation\n\n\nInstall BioSymbols from the Julia REPL:\n\n\njulia\n \nPkg\n.\nadd\n(\nBioSymbols\n)\n\n\n\n\n\n\nIf you are interested in the cutting edge of the development, please check out the master branch to try new features before release.", 
            "title": "Home"
        }, 
        {
            "location": "/#biosymbolsjl", 
            "text": "", 
            "title": "BioSymbols.jl"
        }, 
        {
            "location": "/#description", 
            "text": "BioSymbols.jl provides types for Julia which act as values representing nucleic acids and amino acids for bioinformatics and computational biology scripts and packages.  These types are compatible with other packages in the BioJulia software ecosystem.", 
            "title": "Description"
        }, 
        {
            "location": "/#installation", 
            "text": "Install BioSymbols from the Julia REPL:  julia   Pkg . add ( BioSymbols )   If you are interested in the cutting edge of the development, please check out the master branch to try new features before release.", 
            "title": "Installation"
        }, 
        {
            "location": "/nucleicacids/", 
            "text": "Nucleic Acids\n\n\n\n\nType definitions\n\n\nBioSymbols provides two types of nucleic acids:\n\n\n\n\n\n\n\n\nType\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\nDNA\n\n\ndeoxyribonucleic acid\n\n\n\n\n\n\nRNA\n\n\nribonucleic acid\n\n\n\n\n\n\n\n\nThese two are an 8-bit primitive type and a subtype of \nNucleicAcid\n.\n\n\njulia\n sizeof(DNA)\n1\n\njulia\n DNA \n: NucleicAcid\ntrue\n\n\n\n\n\nThe set of nucleotide symbols in BioSymbols.jl covers the IUPAC nucleotides as well as a GAP (\n-\n) symbol.\n\n\n\n\n\n\n\n\nSymbol\n\n\nConstant\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\n'A'\n\n\nDNA_A\n / \nRNA_A\n\n\nA; Adenine\n\n\n\n\n\n\n'C'\n\n\nDNA_C\n / \nRNA_C\n\n\nC; Cytosine\n\n\n\n\n\n\n'G'\n\n\nDNA_G\n / \nRNA_G\n\n\nG; Guanine\n\n\n\n\n\n\n'T'\n\n\nDNA_T\n\n\nT; Thymine (DNA only)\n\n\n\n\n\n\n'U'\n\n\nRNA_U\n\n\nU; Uracil (RNA only)\n\n\n\n\n\n\n'M'\n\n\nDNA_M\n / \nRNA_M\n\n\nA or C\n\n\n\n\n\n\n'R'\n\n\nDNA_R\n / \nRNA_R\n\n\nA or G\n\n\n\n\n\n\n'W'\n\n\nDNA_W\n / \nRNA_W\n\n\nA or T/U\n\n\n\n\n\n\n'S'\n\n\nDNA_S\n / \nRNA_S\n\n\nC or G\n\n\n\n\n\n\n'Y'\n\n\nDNA_Y\n / \nRNA_Y\n\n\nC or T/U\n\n\n\n\n\n\n'K'\n\n\nDNA_K\n / \nRNA_K\n\n\nG or T/U\n\n\n\n\n\n\n'V'\n\n\nDNA_V\n / \nRNA_V\n\n\nA or C or G; not T/U\n\n\n\n\n\n\n'H'\n\n\nDNA_H\n / \nRNA_H\n\n\nA or C or T; not G\n\n\n\n\n\n\n'D'\n\n\nDNA_D\n / \nRNA_D\n\n\nA or G or T/U; not C\n\n\n\n\n\n\n'B'\n\n\nDNA_B\n / \nRNA_B\n\n\nC or G or T/U; not A\n\n\n\n\n\n\n'N'\n\n\nDNA_N\n / \nRNA_N\n\n\nA or C or G or T/U\n\n\n\n\n\n\n'-'\n\n\nDNA_Gap\n / \nRNA_Gap\n\n\nGap (none of the above)\n\n\n\n\n\n\n\n\nhttp://www.insdc.org/documents/feature_table.html#7.4.1\n\n\nThese are accessible as constants with \nDNA_\n or \nRNA_\n prefix:\n\n\njulia\n DNA_A\nDNA_A\n\njulia\n DNA_T\nDNA_T\n\njulia\n RNA_U\nRNA_U\n\njulia\n DNA_Gap\nDNA_Gap\n\njulia\n typeof(DNA_A)\nBioSymbols.DNA\n\njulia\n typeof(RNA_A)\nBioSymbols.RNA\n\n\n\n\n\nSymbols can be constructed by converting regular characters:\n\n\njulia\n convert(DNA, \nC\n)\nDNA_C\n\njulia\n convert(DNA, \nC\n) === DNA_C\ntrue\n\njulia\n convert(DNA, \nc\n) === convert(DNA, \nC\n)  # convertion is not case-sensitive\ntrue\n\n\n\n\n\nprint\n and \nshow\n methods are defined to output the text representation of a symbol:\n\n\njulia\n print(DNA_A)  # un-decorated text\nA\njulia\n show(DNA_A)   # informative text\nDNA_A\n\n\n\n\n\n\n\nBit encoding\n\n\nEvery nucleotide is encoded using the lower 4 bits of a byte. An unambiguous nucleotide has only one set bit and the other bits are unset. The table below summarizes all unambiguous nucleotides and their corresponding bits. An ambiguous nucleotide is the bitwise OR of unambiguous nucleotides that the ambiguous nucleotide can take. For example, \nDNA_R\n (meaning the nucleotide is either \nDNA_A\n or \nDNA_G\n) is encoded as \n0101\n because \n0101\n is the bitwise OR of \n0001\n (\nDNA_A\n) and \n0100\n (\nDNA_G\n). The gap symbol is always \n0000\n.\n\n\njulia\n bits(reinterpret(UInt8, DNA_A))\n\n00000001\n\n\njulia\n bits(reinterpret(UInt8, DNA_G))\n\n00000100\n\n\njulia\n bits(reinterpret(UInt8, DNA_R))\n\n00000101\n\n\n\n\n\n\nThis bit encoding enables efficient bit operations:\n\n\njulia\n DNA_A | DNA_G  # A or G\nDNA_R\n\njulia\n DNA_A \n DNA_G  # A and G\nDNA_Gap\n\njulia\n DNA_A | ~DNA_A  # A or not A\nDNA_N\n\njulia\n DNA_A | DNA_C | DNA_G | DNA_T  # any DNA\nDNA_N", 
            "title": "Nucleic Acids"
        }, 
        {
            "location": "/nucleicacids/#nucleic-acids", 
            "text": "", 
            "title": "Nucleic Acids"
        }, 
        {
            "location": "/nucleicacids/#type-definitions", 
            "text": "BioSymbols provides two types of nucleic acids:     Type  Meaning      DNA  deoxyribonucleic acid    RNA  ribonucleic acid     These two are an 8-bit primitive type and a subtype of  NucleicAcid .  julia  sizeof(DNA)\n1\n\njulia  DNA  : NucleicAcid\ntrue  The set of nucleotide symbols in BioSymbols.jl covers the IUPAC nucleotides as well as a GAP ( - ) symbol.     Symbol  Constant  Meaning      'A'  DNA_A  /  RNA_A  A; Adenine    'C'  DNA_C  /  RNA_C  C; Cytosine    'G'  DNA_G  /  RNA_G  G; Guanine    'T'  DNA_T  T; Thymine (DNA only)    'U'  RNA_U  U; Uracil (RNA only)    'M'  DNA_M  /  RNA_M  A or C    'R'  DNA_R  /  RNA_R  A or G    'W'  DNA_W  /  RNA_W  A or T/U    'S'  DNA_S  /  RNA_S  C or G    'Y'  DNA_Y  /  RNA_Y  C or T/U    'K'  DNA_K  /  RNA_K  G or T/U    'V'  DNA_V  /  RNA_V  A or C or G; not T/U    'H'  DNA_H  /  RNA_H  A or C or T; not G    'D'  DNA_D  /  RNA_D  A or G or T/U; not C    'B'  DNA_B  /  RNA_B  C or G or T/U; not A    'N'  DNA_N  /  RNA_N  A or C or G or T/U    '-'  DNA_Gap  /  RNA_Gap  Gap (none of the above)     http://www.insdc.org/documents/feature_table.html#7.4.1  These are accessible as constants with  DNA_  or  RNA_  prefix:  julia  DNA_A\nDNA_A\n\njulia  DNA_T\nDNA_T\n\njulia  RNA_U\nRNA_U\n\njulia  DNA_Gap\nDNA_Gap\n\njulia  typeof(DNA_A)\nBioSymbols.DNA\n\njulia  typeof(RNA_A)\nBioSymbols.RNA  Symbols can be constructed by converting regular characters:  julia  convert(DNA,  C )\nDNA_C\n\njulia  convert(DNA,  C ) === DNA_C\ntrue\n\njulia  convert(DNA,  c ) === convert(DNA,  C )  # convertion is not case-sensitive\ntrue  print  and  show  methods are defined to output the text representation of a symbol:  julia  print(DNA_A)  # un-decorated text\nA\njulia  show(DNA_A)   # informative text\nDNA_A", 
            "title": "Type definitions"
        }, 
        {
            "location": "/nucleicacids/#bit-encoding", 
            "text": "Every nucleotide is encoded using the lower 4 bits of a byte. An unambiguous nucleotide has only one set bit and the other bits are unset. The table below summarizes all unambiguous nucleotides and their corresponding bits. An ambiguous nucleotide is the bitwise OR of unambiguous nucleotides that the ambiguous nucleotide can take. For example,  DNA_R  (meaning the nucleotide is either  DNA_A  or  DNA_G ) is encoded as  0101  because  0101  is the bitwise OR of  0001  ( DNA_A ) and  0100  ( DNA_G ). The gap symbol is always  0000 .  julia  bits(reinterpret(UInt8, DNA_A)) 00000001 \n\njulia  bits(reinterpret(UInt8, DNA_G)) 00000100 \n\njulia  bits(reinterpret(UInt8, DNA_R)) 00000101   This bit encoding enables efficient bit operations:  julia  DNA_A | DNA_G  # A or G\nDNA_R\n\njulia  DNA_A   DNA_G  # A and G\nDNA_Gap\n\njulia  DNA_A | ~DNA_A  # A or not A\nDNA_N\n\njulia  DNA_A | DNA_C | DNA_G | DNA_T  # any DNA\nDNA_N", 
            "title": "Bit encoding"
        }, 
        {
            "location": "/aminoacids/", 
            "text": "Amino Acids\n\n\nSet of amino acid symbols also covers IUPAC amino acid symbols plus a gap symbol:\n\n\n\n\n\n\n\n\nSymbol\n\n\nConstant\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\n'A'\n\n\nAA_A\n\n\nAlanine\n\n\n\n\n\n\n'R'\n\n\nAA_R\n\n\nArginine\n\n\n\n\n\n\n'N'\n\n\nAA_N\n\n\nAsparagine\n\n\n\n\n\n\n'D'\n\n\nAA_D\n\n\nAspartic acid (Aspartate)\n\n\n\n\n\n\n'C'\n\n\nAA_C\n\n\nCysteine\n\n\n\n\n\n\n'Q'\n\n\nAA_Q\n\n\nGlutamine\n\n\n\n\n\n\n'E'\n\n\nAA_E\n\n\nGlutamic acid (Glutamate)\n\n\n\n\n\n\n'G'\n\n\nAA_G\n\n\nGlycine\n\n\n\n\n\n\n'H'\n\n\nAA_H\n\n\nHistidine\n\n\n\n\n\n\n'I'\n\n\nAA_I\n\n\nIsoleucine\n\n\n\n\n\n\n'L'\n\n\nAA_L\n\n\nLeucine\n\n\n\n\n\n\n'K'\n\n\nAA_K\n\n\nLysine\n\n\n\n\n\n\n'M'\n\n\nAA_M\n\n\nMethionine\n\n\n\n\n\n\n'F'\n\n\nAA_F\n\n\nPhenylalanine\n\n\n\n\n\n\n'P'\n\n\nAA_P\n\n\nProline\n\n\n\n\n\n\n'S'\n\n\nAA_S\n\n\nSerine\n\n\n\n\n\n\n'T'\n\n\nAA_T\n\n\nThreonine\n\n\n\n\n\n\n'W'\n\n\nAA_W\n\n\nTryptophan\n\n\n\n\n\n\n'Y'\n\n\nAA_Y\n\n\nTyrosine\n\n\n\n\n\n\n'V'\n\n\nAA_V\n\n\nValine\n\n\n\n\n\n\n'O'\n\n\nAA_O\n\n\nPyrrolysine\n\n\n\n\n\n\n'U'\n\n\nAA_U\n\n\nSelenocysteine\n\n\n\n\n\n\n'B'\n\n\nAA_B\n\n\nAspartic acid or Asparagine\n\n\n\n\n\n\n'J'\n\n\nAA_J\n\n\nLeucine or Isoleucine\n\n\n\n\n\n\n'Z'\n\n\nAA_Z\n\n\nGlutamine or Glutamic acid\n\n\n\n\n\n\n'X'\n\n\nAA_X\n\n\nAny amino acid\n\n\n\n\n\n\n'*'\n\n\nAA_Term\n\n\nTermination codon\n\n\n\n\n\n\n'-'\n\n\nAA_Gap\n\n\nGap (none of the above)\n\n\n\n\n\n\n\n\nhttp://www.insdc.org/documents/feature_table.html#7.4.3\n\n\nSymbols are accessible as constants with \nAA_\n prefix:\n\n\njulia\n AA_A\nAA_A\n\njulia\n AA_Q\nAA_Q\n\njulia\n AA_Term\nAA_Term\n\njulia\n typeof(AA_A)\nBioSymbols.AminoAcid\n\n\n\n\n\nSymbols can be constructed by converting regular characters:\n\n\njulia\n convert(AminoAcid, \nA\n)\nAA_A\n\njulia\n convert(AminoAcid, \nP\n) === AA_P\ntrue\n\njulia\n convert(AminoAcid, \na\n) === convert(AminoAcid, \nA\n)\ntrue\n\n\n\n\n\n3-letter and 1-letter abbreviations can be parsed using \nparse\n in a case-insensitive way:\n\n\njulia\n parse(AminoAcid, \nPro\n)  # 3-letter abbreviation\nAA_P\n\njulia\n parse(AminoAcid, \nP\n)    # 1-letter abbreviation\nAA_P\n\njulia\n parse(AminoAcid, \nPro\n) == parse(AminoAcid, \npRo\n)\ntrue\n\njulia\n tryparse(AminoAcid, \nPro\n)  # tryparse returns a nullable value\nNullable{BioSymbols.AminoAcid}(AA_P)\n\njulia\n tryparse(AminoAcid, \nPr\n)\nNullable{BioSymbols.AminoAcid}()", 
            "title": "Amino Acids"
        }, 
        {
            "location": "/aminoacids/#amino-acids", 
            "text": "Set of amino acid symbols also covers IUPAC amino acid symbols plus a gap symbol:     Symbol  Constant  Meaning      'A'  AA_A  Alanine    'R'  AA_R  Arginine    'N'  AA_N  Asparagine    'D'  AA_D  Aspartic acid (Aspartate)    'C'  AA_C  Cysteine    'Q'  AA_Q  Glutamine    'E'  AA_E  Glutamic acid (Glutamate)    'G'  AA_G  Glycine    'H'  AA_H  Histidine    'I'  AA_I  Isoleucine    'L'  AA_L  Leucine    'K'  AA_K  Lysine    'M'  AA_M  Methionine    'F'  AA_F  Phenylalanine    'P'  AA_P  Proline    'S'  AA_S  Serine    'T'  AA_T  Threonine    'W'  AA_W  Tryptophan    'Y'  AA_Y  Tyrosine    'V'  AA_V  Valine    'O'  AA_O  Pyrrolysine    'U'  AA_U  Selenocysteine    'B'  AA_B  Aspartic acid or Asparagine    'J'  AA_J  Leucine or Isoleucine    'Z'  AA_Z  Glutamine or Glutamic acid    'X'  AA_X  Any amino acid    '*'  AA_Term  Termination codon    '-'  AA_Gap  Gap (none of the above)     http://www.insdc.org/documents/feature_table.html#7.4.3  Symbols are accessible as constants with  AA_  prefix:  julia  AA_A\nAA_A\n\njulia  AA_Q\nAA_Q\n\njulia  AA_Term\nAA_Term\n\njulia  typeof(AA_A)\nBioSymbols.AminoAcid  Symbols can be constructed by converting regular characters:  julia  convert(AminoAcid,  A )\nAA_A\n\njulia  convert(AminoAcid,  P ) === AA_P\ntrue\n\njulia  convert(AminoAcid,  a ) === convert(AminoAcid,  A )\ntrue  3-letter and 1-letter abbreviations can be parsed using  parse  in a case-insensitive way:  julia  parse(AminoAcid,  Pro )  # 3-letter abbreviation\nAA_P\n\njulia  parse(AminoAcid,  P )    # 1-letter abbreviation\nAA_P\n\njulia  parse(AminoAcid,  Pro ) == parse(AminoAcid,  pRo )\ntrue\n\njulia  tryparse(AminoAcid,  Pro )  # tryparse returns a nullable value\nNullable{BioSymbols.AminoAcid}(AA_P)\n\njulia  tryparse(AminoAcid,  Pr )\nNullable{BioSymbols.AminoAcid}()", 
            "title": "Amino Acids"
        }, 
        {
            "location": "/sequences/", 
            "text": "Sequences\n\n\n\n\nUsing \nVector\n\n\nA quick way to create a DNA/RNA sequence is storing symbols in a vector.\n\n\njulia\n seq = [DNA_A, DNA_C, DNA_G, DNA_T]\n4-element Array{BioSymbols.DNA,1}:\n DNA_A\n DNA_C\n DNA_G\n DNA_T\n\njulia\n [convert(DNA, x) for x in \nACGT\n]  # from a string\n4-element Array{BioSymbols.DNA,1}:\n DNA_A\n DNA_C\n DNA_G\n DNA_T\n\n\n\n\n\n\n\nUsing \nTuple\n\n\nJulia offers a tuple type to represent multiple values in a value. It is similar to \nVector\n but is significantly different in some points. First, \nTuple\n is immutable while \nVector\n is mutable. So you cannot update elements in a tuple once created. Second, a tuple type is parameterized by its length. That means it is inefficient to represent variable-length sequences in tuple due to type instability problem.\n\n\njulia\n (RNA_A, RNA_U, RNA_C)  # RNA triplet (or codon)\n(RNA_A, RNA_U, RNA_C)\n\n\n\n\n\n\n\nUsing BioSequences.jl\n\n\nUsing \nVector\n or \nTuple\n is simple, however, BioSymbols does not offer useful operations for these representations. So you need to use built-in operations of Julia or other packages. Moreover, these representations are not necessarily efficient. For example, \nDNA\n is an 8-bit primitive but it only uses 4 bits, which means 50% of a \nVector{DNA}\n's space is not used at all.\n\n\nFor the purpose of representing sequences as efficient as possible BioJulia has developed \nBioSequences.jl\n package. The \nBioSequence\n type of BioSequences.jl is able to represent a DNA/RNA sequence in 2 or 4 bits per symbol. It also offers many efficient algorithms and I/O tools for common file formats such as FASTA.", 
            "title": "Sequences"
        }, 
        {
            "location": "/sequences/#sequences", 
            "text": "", 
            "title": "Sequences"
        }, 
        {
            "location": "/sequences/#using-vector", 
            "text": "A quick way to create a DNA/RNA sequence is storing symbols in a vector.  julia  seq = [DNA_A, DNA_C, DNA_G, DNA_T]\n4-element Array{BioSymbols.DNA,1}:\n DNA_A\n DNA_C\n DNA_G\n DNA_T\n\njulia  [convert(DNA, x) for x in  ACGT ]  # from a string\n4-element Array{BioSymbols.DNA,1}:\n DNA_A\n DNA_C\n DNA_G\n DNA_T", 
            "title": "Using Vector"
        }, 
        {
            "location": "/sequences/#using-tuple", 
            "text": "Julia offers a tuple type to represent multiple values in a value. It is similar to  Vector  but is significantly different in some points. First,  Tuple  is immutable while  Vector  is mutable. So you cannot update elements in a tuple once created. Second, a tuple type is parameterized by its length. That means it is inefficient to represent variable-length sequences in tuple due to type instability problem.  julia  (RNA_A, RNA_U, RNA_C)  # RNA triplet (or codon)\n(RNA_A, RNA_U, RNA_C)", 
            "title": "Using Tuple"
        }, 
        {
            "location": "/sequences/#using-biosequencesjl", 
            "text": "Using  Vector  or  Tuple  is simple, however, BioSymbols does not offer useful operations for these representations. So you need to use built-in operations of Julia or other packages. Moreover, these representations are not necessarily efficient. For example,  DNA  is an 8-bit primitive but it only uses 4 bits, which means 50% of a  Vector{DNA} 's space is not used at all.  For the purpose of representing sequences as efficient as possible BioJulia has developed  BioSequences.jl  package. The  BioSequence  type of BioSequences.jl is able to represent a DNA/RNA sequence in 2 or 4 bits per symbol. It also offers many efficient algorithms and I/O tools for common file formats such as FASTA.", 
            "title": "Using BioSequences.jl"
        }, 
        {
            "location": "/references/", 
            "text": "References\n\n\n\n\nNucleic acids\n\n\n#\n\n\nBioSymbols.NucleicAcid\n \n \nType\n.\n\n\nAn abstract nucleic acid type.\n\n\nsource\n\n\n\n\nDNA\n\n\n#\n\n\nBioSymbols.DNA\n \n \nType\n.\n\n\nA deoxyribonucleic acid type.\n\n\nsource\n\n\n#\n\n\nBioSymbols.DNA_A\n \n \nConstant\n.\n\n\nDNA Adenine\n\n\nsource\n\n\n#\n\n\nBioSymbols.DNA_C\n \n \nConstant\n.\n\n\nDNA Cytosine\n\n\nsource\n\n\n#\n\n\nBioSymbols.DNA_G\n \n \nConstant\n.\n\n\nDNA Guanine\n\n\nsource\n\n\n#\n\n\nBioSymbols.DNA_T\n \n \nConstant\n.\n\n\nDNA Thymine\n\n\nsource\n\n\n#\n\n\nBioSymbols.DNA_M\n \n \nConstant\n.\n\n\nDNA Adenine or Cytosine\n\n\nsource\n\n\n#\n\n\nBioSymbols.DNA_R\n \n \nConstant\n.\n\n\nDNA Adenine or Guanine\n\n\nsource\n\n\n#\n\n\nBioSymbols.DNA_W\n \n \nConstant\n.\n\n\nDNA Adenine or Thymine\n\n\nsource\n\n\n#\n\n\nBioSymbols.DNA_S\n \n \nConstant\n.\n\n\nDNA Cytosine or Guanine\n\n\nsource\n\n\n#\n\n\nBioSymbols.DNA_Y\n \n \nConstant\n.\n\n\nDNA Cytosine or Thymine\n\n\nsource\n\n\n#\n\n\nBioSymbols.DNA_K\n \n \nConstant\n.\n\n\nDNA Guanine or Thymine\n\n\nsource\n\n\n#\n\n\nBioSymbols.DNA_V\n \n \nConstant\n.\n\n\nDNA Adenine, Cytosine or Guanine\n\n\nsource\n\n\n#\n\n\nBioSymbols.DNA_H\n \n \nConstant\n.\n\n\nDNA Adenine, Cytosine or Thymine\n\n\nsource\n\n\n#\n\n\nBioSymbols.DNA_D\n \n \nConstant\n.\n\n\nDNA Adenine, Guanine or Thymine\n\n\nsource\n\n\n#\n\n\nBioSymbols.DNA_B\n \n \nConstant\n.\n\n\nDNA Cytosine, Guanine or Thymine\n\n\nsource\n\n\n#\n\n\nBioSymbols.DNA_N\n \n \nConstant\n.\n\n\nDNA Adenine, Cytosine, Guanine or Thymine\n\n\nsource\n\n\n#\n\n\nBioSymbols.DNA_Gap\n \n \nConstant\n.\n\n\nDNA Gap\n\n\nsource\n\n\n#\n\n\nBioSymbols.ACGT\n \n \nConstant\n.\n\n\nACGT\n\n\n\n\n\nUnambiguous DNA.\n\n\nExamples\n\n\njulia\n ACGT\n(DNA_A, DNA_C, DNA_G, DNA_T)\n\n\n\n\n\nsource\n\n\n#\n\n\nBioSymbols.ACGTN\n \n \nConstant\n.\n\n\nACGTN\n\n\n\n\n\nUnambiguous DNA and \nDNA_N\n.\n\n\nExamples\n\n\njulia\n ACGTN\n(DNA_A, DNA_C, DNA_G, DNA_T, DNA_N)\n\n\n\n\n\nsource\n\n\n\n\nRNA\n\n\n#\n\n\nBioSymbols.RNA\n \n \nType\n.\n\n\nA ribonucleic acid type.\n\n\nsource\n\n\n#\n\n\nBioSymbols.RNA_A\n \n \nConstant\n.\n\n\nRNA Adenine\n\n\nsource\n\n\n#\n\n\nBioSymbols.RNA_C\n \n \nConstant\n.\n\n\nRNA Cytosine\n\n\nsource\n\n\n#\n\n\nBioSymbols.RNA_G\n \n \nConstant\n.\n\n\nRNA Guanine\n\n\nsource\n\n\n#\n\n\nBioSymbols.RNA_U\n \n \nConstant\n.\n\n\nRNA Uracil\n\n\nsource\n\n\n#\n\n\nBioSymbols.RNA_M\n \n \nConstant\n.\n\n\nRNA Adenine or Cytosine\n\n\nsource\n\n\n#\n\n\nBioSymbols.RNA_R\n \n \nConstant\n.\n\n\nRNA Adenine or Guanine\n\n\nsource\n\n\n#\n\n\nBioSymbols.RNA_W\n \n \nConstant\n.\n\n\nRNA Adenine or Uracil\n\n\nsource\n\n\n#\n\n\nBioSymbols.RNA_S\n \n \nConstant\n.\n\n\nRNA Cytosine or Guanine\n\n\nsource\n\n\n#\n\n\nBioSymbols.RNA_Y\n \n \nConstant\n.\n\n\nRNA Cytosine or Uracil\n\n\nsource\n\n\n#\n\n\nBioSymbols.RNA_K\n \n \nConstant\n.\n\n\nRNA Guanine or Uracil\n\n\nsource\n\n\n#\n\n\nBioSymbols.RNA_V\n \n \nConstant\n.\n\n\nRNA Adenine, Cytosine or Guanine\n\n\nsource\n\n\n#\n\n\nBioSymbols.RNA_H\n \n \nConstant\n.\n\n\nRNA Adenine, Cytosine or Uracil\n\n\nsource\n\n\n#\n\n\nBioSymbols.RNA_D\n \n \nConstant\n.\n\n\nRNA Adenine, Guanine or Uracil\n\n\nsource\n\n\n#\n\n\nBioSymbols.RNA_B\n \n \nConstant\n.\n\n\nRNA Cytosine, Guanine or Uracil\n\n\nsource\n\n\n#\n\n\nBioSymbols.RNA_N\n \n \nConstant\n.\n\n\nRNA Adenine, Cytosine, Guanine or Uracil\n\n\nsource\n\n\n#\n\n\nBioSymbols.RNA_Gap\n \n \nConstant\n.\n\n\nRNA Gap\n\n\nsource\n\n\n#\n\n\nBioSymbols.ACGU\n \n \nConstant\n.\n\n\nACGU\n\n\n\n\n\nUnambiguous RNA.\n\n\nExamples\n\n\njulia\n ACGU\n(RNA_A, RNA_C, RNA_G, RNA_U)\n\n\n\n\n\nsource\n\n\n#\n\n\nBioSymbols.ACGUN\n \n \nConstant\n.\n\n\nACGUN\n\n\n\n\n\nUnambiguous RNA and \nRNA_N\n.\n\n\nExamples\n\n\njulia\n ACGUN\n(RNA_A, RNA_C, RNA_G, RNA_U, RNA_N)\n\n\n\n\n\nsource\n\n\n\n\nFunctions\n\n\n#\n\n\nBioSymbols.alphabet\n \n \nMethod\n.\n\n\nalphabet(DNA)\n\n\n\n\n\nGet all symbols of \nDNA\n in sorted order.\n\n\nExamples\n\n\njulia\n alphabet(DNA)\n(DNA_Gap, DNA_A, DNA_C, DNA_M, DNA_G, DNA_R, DNA_S, DNA_V, DNA_T, DNA_W, DNA_Y, DNA_H, DNA_K, DNA_D, DNA_B, DNA_N)\n\njulia\n issorted(alphabet(DNA))\ntrue\n\n\n\n\n\nsource\n\n\n#\n\n\nBioSymbols.alphabet\n \n \nMethod\n.\n\n\nalphabet(RNA)\n\n\n\n\n\nGet all symbols of \nRNA\n in sorted order.\n\n\nExamples\n\n\njulia\n alphabet(RNA)\n(RNA_Gap, RNA_A, RNA_C, RNA_M, RNA_G, RNA_R, RNA_S, RNA_V, RNA_U, RNA_W, RNA_Y, RNA_H, RNA_K, RNA_D, RNA_B, RNA_N)\n\njulia\n issorted(alphabet(RNA))\ntrue\n\n\n\n\n\nsource\n\n\n#\n\n\nBioSymbols.gap\n \n \nMethod\n.\n\n\ngap(DNA)\n\n\n\n\n\nReturn \nDNA_Gap\n.\n\n\nsource\n\n\n#\n\n\nBioSymbols.gap\n \n \nMethod\n.\n\n\ngap(RNA)\n\n\n\n\n\nReturn \nRNA_Gap\n.\n\n\nsource\n\n\n#\n\n\nBioSymbols.complement\n \n \nMethod\n.\n\n\ncomplement(nt::NucleicAcid)\n\n\n\n\n\nReturn the complementary nucleotide of \nnt\n.\n\n\nThis function returns the union of all possible complementary nucleotides.\n\n\nExamples\n\n\njulia\n complement(DNA_A)\nDNA_T\n\njulia\n complement(DNA_N)\nDNA_N\n\njulia\n complement(RNA_U)\nRNA_A\n\n\n\n\n\nsource\n\n\n#\n\n\nBioSymbols.isgap\n \n \nMethod\n.\n\n\nisgap(nt::NucleicAcid)\n\n\n\n\n\nTest if \nnt\n is a gap.\n\n\nsource\n\n\n#\n\n\nBioSymbols.compatbits\n \n \nMethod\n.\n\n\ncompatbits(nt::NucleicAcid)\n\n\n\n\n\nReturn the compatibility bits of \nnt\n as \nUInt8\n.\n\n\nExamples\n\n\njulia\n compatbits(DNA_A)\n0x01\n\njulia\n compatbits(DNA_C)\n0x02\n\njulia\n compatbits(DNA_N)\n0x0f\n\n\n\n\n\nsource\n\n\n#\n\n\nBioSymbols.iscompatible\n \n \nMethod\n.\n\n\niscompatible(x::T, y::T) where T \n: NucleicAcid\n\n\n\n\n\nTest if \nx\n and \ny\n are compatible with each other (i.e. \nx\n and \ny\n can be the same symbol).\n\n\nx\n and \ny\n must be the same type.\n\n\nExamples\n\n\njulia\n iscompatible(DNA_A, DNA_A)\ntrue\n\njulia\n iscompatible(DNA_C, DNA_N)  # DNA_N can be DNA_C\ntrue\n\njulia\n iscompatible(DNA_C, DNA_R)  # DNA_R (A or G) cannot be DNA_C\nfalse\n\n\n\n\n\nsource\n\n\n#\n\n\nBioSymbols.isambiguous\n \n \nMethod\n.\n\n\nisambiguous(nt::NucleicAcid)\n\n\n\n\n\nTest if \nnt\n is an ambiguous nucleotide.\n\n\nsource\n\n\n#\n\n\nBioSymbols.iscertain\n \n \nMethod\n.\n\n\niscertain(nt::NucleicAcid)\n\n\n\n\n\nTest if \nnt\n is a non-ambiguous nucleotide e.g. ACGT.\n\n\nsource\n\n\n#\n\n\nBioSymbols.isGC\n \n \nMethod\n.\n\n\nisGC(nt::NucleicAcid)\n\n\n\n\n\nTest if \nnt\n is surely either guanine or cytosine.\n\n\nsource\n\n\n#\n\n\nBioSymbols.ispurine\n \n \nMethod\n.\n\n\nispurine(nt::NucleicAcid)\n\n\n\n\n\nTest if \nnt\n is surely a purine.\n\n\nsource\n\n\n#\n\n\nBioSymbols.ispyrimidine\n \n \nMethod\n.\n\n\nispyrimidine(nt::NucleicAcid)\n\n\n\n\n\nTest if \nnt\n is surely a pyrimidine.\n\n\nsource\n\n\n\n\nAmino acids\n\n\n\n\nAmino acids\n\n\n#\n\n\nBioSymbols.AminoAcid\n \n \nType\n.\n\n\nAn amino acid type.\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_A\n \n \nConstant\n.\n\n\nAlanine\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_R\n \n \nConstant\n.\n\n\nArginine\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_N\n \n \nConstant\n.\n\n\nAsparagine\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_D\n \n \nConstant\n.\n\n\nAspartic Acid\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_C\n \n \nConstant\n.\n\n\nCysteine\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_Q\n \n \nConstant\n.\n\n\nGlutamine\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_E\n \n \nConstant\n.\n\n\nGlutamic Acid\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_G\n \n \nConstant\n.\n\n\nGlycine\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_H\n \n \nConstant\n.\n\n\nHistidine\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_I\n \n \nConstant\n.\n\n\nIsoleucine\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_L\n \n \nConstant\n.\n\n\nLeucine\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_K\n \n \nConstant\n.\n\n\nLysine\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_M\n \n \nConstant\n.\n\n\nMethionine\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_F\n \n \nConstant\n.\n\n\nPhenylalanine\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_P\n \n \nConstant\n.\n\n\nProline\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_S\n \n \nConstant\n.\n\n\nSerine\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_T\n \n \nConstant\n.\n\n\nThreonine\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_W\n \n \nConstant\n.\n\n\nTryptophan\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_Y\n \n \nConstant\n.\n\n\nTyrosine\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_V\n \n \nConstant\n.\n\n\nValine\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_O\n \n \nConstant\n.\n\n\nPyrrolysine\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_U\n \n \nConstant\n.\n\n\nSelenocysteine\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_B\n \n \nConstant\n.\n\n\nAspartic Acid or Asparagine\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_J\n \n \nConstant\n.\n\n\nLeucine or Isoleucine\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_Z\n \n \nConstant\n.\n\n\nGlutamine or Glutamic Acid\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_X\n \n \nConstant\n.\n\n\nUnspecified or Unknown Amino Acid\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_Term\n \n \nConstant\n.\n\n\nTerminal\n\n\nsource\n\n\n#\n\n\nBioSymbols.AA_Gap\n \n \nConstant\n.\n\n\nAmino Acid Gap\n\n\nsource\n\n\n\n\nFunctions\n\n\n#\n\n\nBioSymbols.alphabet\n \n \nMethod\n.\n\n\nalphabet(AminoAcid)\n\n\n\n\n\nGet all symbols of \nAminoAcid\n in sorted order.\n\n\nExamples\n\n\njulia\n alphabet(AminoAcid)\n(AA_A, AA_R, AA_N, AA_D, AA_C, AA_Q, AA_E, AA_G, AA_H, AA_I, AA_L, AA_K, AA_M, AA_F, AA_P, AA_S, AA_T, AA_W, AA_Y, AA_V, AA_O, AA_U, AA_B, AA_J, AA_Z, AA_X, AA_Term, AA_Gap)\n\njulia\n issorted(alphabet(AminoAcid))\ntrue\n\n\n\n\n\nsource\n\n\n#\n\n\nBioSymbols.gap\n \n \nMethod\n.\n\n\ngap(AminoAcid)\n\n\n\n\n\nReturn \nAA_Gap\n.\n\n\nsource\n\n\n#\n\n\nBioSymbols.isgap\n \n \nMethod\n.\n\n\nisgap(aa::AminoAcid)\n\n\n\n\n\nTest if \naa\n is a gap.\n\n\nsource\n\n\n#\n\n\nBioSymbols.compatbits\n \n \nMethod\n.\n\n\ncompatbits(aa::AminoAcid)\n\n\n\n\n\nReturn the compatibility bits of \naa\n as \nUInt32\n.\n\n\nExamples\n\n\njulia\n compatbits(AA_A)\n0x00000001\n\njulia\n compatbits(AA_J)\n0x00000600\n\n\n\n\n\nsource\n\n\n#\n\n\nBioSymbols.iscompatible\n \n \nMethod\n.\n\n\niscompatible(x::AminoAcid, y::AminoAcid)\n\n\n\n\n\nTest if \nx\n and \ny\n are compatible with each other.\n\n\nExamples\n\n\njulia\n iscompatible(AA_A, AA_R)\nfalse\n\njulia\n iscompatible(AA_A, AA_X)\ntrue\n\n\n\n\n\nsource\n\n\n#\n\n\nBioSymbols.isambiguous\n \n \nMethod\n.\n\n\nisambiguous(aa::AminoAcid)\n\n\n\n\n\nTest if \naa\n is an ambiguous amino acid.\n\n\nsource\n\n\n#\n\n\nBioSymbols.iscertain\n \n \nMethod\n.\n\n\niscertain(aa::AminoAcid)\n\n\n\n\n\nTest if \naa\n is a non-ambiguous amino acid.\n\n\nsource", 
            "title": "References"
        }, 
        {
            "location": "/references/#references", 
            "text": "", 
            "title": "References"
        }, 
        {
            "location": "/references/#nucleic-acids", 
            "text": "#  BioSymbols.NucleicAcid     Type .  An abstract nucleic acid type.  source", 
            "title": "Nucleic acids"
        }, 
        {
            "location": "/references/#dna", 
            "text": "#  BioSymbols.DNA     Type .  A deoxyribonucleic acid type.  source  #  BioSymbols.DNA_A     Constant .  DNA Adenine  source  #  BioSymbols.DNA_C     Constant .  DNA Cytosine  source  #  BioSymbols.DNA_G     Constant .  DNA Guanine  source  #  BioSymbols.DNA_T     Constant .  DNA Thymine  source  #  BioSymbols.DNA_M     Constant .  DNA Adenine or Cytosine  source  #  BioSymbols.DNA_R     Constant .  DNA Adenine or Guanine  source  #  BioSymbols.DNA_W     Constant .  DNA Adenine or Thymine  source  #  BioSymbols.DNA_S     Constant .  DNA Cytosine or Guanine  source  #  BioSymbols.DNA_Y     Constant .  DNA Cytosine or Thymine  source  #  BioSymbols.DNA_K     Constant .  DNA Guanine or Thymine  source  #  BioSymbols.DNA_V     Constant .  DNA Adenine, Cytosine or Guanine  source  #  BioSymbols.DNA_H     Constant .  DNA Adenine, Cytosine or Thymine  source  #  BioSymbols.DNA_D     Constant .  DNA Adenine, Guanine or Thymine  source  #  BioSymbols.DNA_B     Constant .  DNA Cytosine, Guanine or Thymine  source  #  BioSymbols.DNA_N     Constant .  DNA Adenine, Cytosine, Guanine or Thymine  source  #  BioSymbols.DNA_Gap     Constant .  DNA Gap  source  #  BioSymbols.ACGT     Constant .  ACGT  Unambiguous DNA.  Examples  julia  ACGT\n(DNA_A, DNA_C, DNA_G, DNA_T)  source  #  BioSymbols.ACGTN     Constant .  ACGTN  Unambiguous DNA and  DNA_N .  Examples  julia  ACGTN\n(DNA_A, DNA_C, DNA_G, DNA_T, DNA_N)  source", 
            "title": "DNA"
        }, 
        {
            "location": "/references/#rna", 
            "text": "#  BioSymbols.RNA     Type .  A ribonucleic acid type.  source  #  BioSymbols.RNA_A     Constant .  RNA Adenine  source  #  BioSymbols.RNA_C     Constant .  RNA Cytosine  source  #  BioSymbols.RNA_G     Constant .  RNA Guanine  source  #  BioSymbols.RNA_U     Constant .  RNA Uracil  source  #  BioSymbols.RNA_M     Constant .  RNA Adenine or Cytosine  source  #  BioSymbols.RNA_R     Constant .  RNA Adenine or Guanine  source  #  BioSymbols.RNA_W     Constant .  RNA Adenine or Uracil  source  #  BioSymbols.RNA_S     Constant .  RNA Cytosine or Guanine  source  #  BioSymbols.RNA_Y     Constant .  RNA Cytosine or Uracil  source  #  BioSymbols.RNA_K     Constant .  RNA Guanine or Uracil  source  #  BioSymbols.RNA_V     Constant .  RNA Adenine, Cytosine or Guanine  source  #  BioSymbols.RNA_H     Constant .  RNA Adenine, Cytosine or Uracil  source  #  BioSymbols.RNA_D     Constant .  RNA Adenine, Guanine or Uracil  source  #  BioSymbols.RNA_B     Constant .  RNA Cytosine, Guanine or Uracil  source  #  BioSymbols.RNA_N     Constant .  RNA Adenine, Cytosine, Guanine or Uracil  source  #  BioSymbols.RNA_Gap     Constant .  RNA Gap  source  #  BioSymbols.ACGU     Constant .  ACGU  Unambiguous RNA.  Examples  julia  ACGU\n(RNA_A, RNA_C, RNA_G, RNA_U)  source  #  BioSymbols.ACGUN     Constant .  ACGUN  Unambiguous RNA and  RNA_N .  Examples  julia  ACGUN\n(RNA_A, RNA_C, RNA_G, RNA_U, RNA_N)  source", 
            "title": "RNA"
        }, 
        {
            "location": "/references/#functions", 
            "text": "#  BioSymbols.alphabet     Method .  alphabet(DNA)  Get all symbols of  DNA  in sorted order.  Examples  julia  alphabet(DNA)\n(DNA_Gap, DNA_A, DNA_C, DNA_M, DNA_G, DNA_R, DNA_S, DNA_V, DNA_T, DNA_W, DNA_Y, DNA_H, DNA_K, DNA_D, DNA_B, DNA_N)\n\njulia  issorted(alphabet(DNA))\ntrue  source  #  BioSymbols.alphabet     Method .  alphabet(RNA)  Get all symbols of  RNA  in sorted order.  Examples  julia  alphabet(RNA)\n(RNA_Gap, RNA_A, RNA_C, RNA_M, RNA_G, RNA_R, RNA_S, RNA_V, RNA_U, RNA_W, RNA_Y, RNA_H, RNA_K, RNA_D, RNA_B, RNA_N)\n\njulia  issorted(alphabet(RNA))\ntrue  source  #  BioSymbols.gap     Method .  gap(DNA)  Return  DNA_Gap .  source  #  BioSymbols.gap     Method .  gap(RNA)  Return  RNA_Gap .  source  #  BioSymbols.complement     Method .  complement(nt::NucleicAcid)  Return the complementary nucleotide of  nt .  This function returns the union of all possible complementary nucleotides.  Examples  julia  complement(DNA_A)\nDNA_T\n\njulia  complement(DNA_N)\nDNA_N\n\njulia  complement(RNA_U)\nRNA_A  source  #  BioSymbols.isgap     Method .  isgap(nt::NucleicAcid)  Test if  nt  is a gap.  source  #  BioSymbols.compatbits     Method .  compatbits(nt::NucleicAcid)  Return the compatibility bits of  nt  as  UInt8 .  Examples  julia  compatbits(DNA_A)\n0x01\n\njulia  compatbits(DNA_C)\n0x02\n\njulia  compatbits(DNA_N)\n0x0f  source  #  BioSymbols.iscompatible     Method .  iscompatible(x::T, y::T) where T  : NucleicAcid  Test if  x  and  y  are compatible with each other (i.e.  x  and  y  can be the same symbol).  x  and  y  must be the same type.  Examples  julia  iscompatible(DNA_A, DNA_A)\ntrue\n\njulia  iscompatible(DNA_C, DNA_N)  # DNA_N can be DNA_C\ntrue\n\njulia  iscompatible(DNA_C, DNA_R)  # DNA_R (A or G) cannot be DNA_C\nfalse  source  #  BioSymbols.isambiguous     Method .  isambiguous(nt::NucleicAcid)  Test if  nt  is an ambiguous nucleotide.  source  #  BioSymbols.iscertain     Method .  iscertain(nt::NucleicAcid)  Test if  nt  is a non-ambiguous nucleotide e.g. ACGT.  source  #  BioSymbols.isGC     Method .  isGC(nt::NucleicAcid)  Test if  nt  is surely either guanine or cytosine.  source  #  BioSymbols.ispurine     Method .  ispurine(nt::NucleicAcid)  Test if  nt  is surely a purine.  source  #  BioSymbols.ispyrimidine     Method .  ispyrimidine(nt::NucleicAcid)  Test if  nt  is surely a pyrimidine.  source", 
            "title": "Functions"
        }, 
        {
            "location": "/references/#amino-acids", 
            "text": "", 
            "title": "Amino acids"
        }, 
        {
            "location": "/references/#amino-acids_1", 
            "text": "#  BioSymbols.AminoAcid     Type .  An amino acid type.  source  #  BioSymbols.AA_A     Constant .  Alanine  source  #  BioSymbols.AA_R     Constant .  Arginine  source  #  BioSymbols.AA_N     Constant .  Asparagine  source  #  BioSymbols.AA_D     Constant .  Aspartic Acid  source  #  BioSymbols.AA_C     Constant .  Cysteine  source  #  BioSymbols.AA_Q     Constant .  Glutamine  source  #  BioSymbols.AA_E     Constant .  Glutamic Acid  source  #  BioSymbols.AA_G     Constant .  Glycine  source  #  BioSymbols.AA_H     Constant .  Histidine  source  #  BioSymbols.AA_I     Constant .  Isoleucine  source  #  BioSymbols.AA_L     Constant .  Leucine  source  #  BioSymbols.AA_K     Constant .  Lysine  source  #  BioSymbols.AA_M     Constant .  Methionine  source  #  BioSymbols.AA_F     Constant .  Phenylalanine  source  #  BioSymbols.AA_P     Constant .  Proline  source  #  BioSymbols.AA_S     Constant .  Serine  source  #  BioSymbols.AA_T     Constant .  Threonine  source  #  BioSymbols.AA_W     Constant .  Tryptophan  source  #  BioSymbols.AA_Y     Constant .  Tyrosine  source  #  BioSymbols.AA_V     Constant .  Valine  source  #  BioSymbols.AA_O     Constant .  Pyrrolysine  source  #  BioSymbols.AA_U     Constant .  Selenocysteine  source  #  BioSymbols.AA_B     Constant .  Aspartic Acid or Asparagine  source  #  BioSymbols.AA_J     Constant .  Leucine or Isoleucine  source  #  BioSymbols.AA_Z     Constant .  Glutamine or Glutamic Acid  source  #  BioSymbols.AA_X     Constant .  Unspecified or Unknown Amino Acid  source  #  BioSymbols.AA_Term     Constant .  Terminal  source  #  BioSymbols.AA_Gap     Constant .  Amino Acid Gap  source", 
            "title": "Amino acids"
        }, 
        {
            "location": "/references/#functions_1", 
            "text": "#  BioSymbols.alphabet     Method .  alphabet(AminoAcid)  Get all symbols of  AminoAcid  in sorted order.  Examples  julia  alphabet(AminoAcid)\n(AA_A, AA_R, AA_N, AA_D, AA_C, AA_Q, AA_E, AA_G, AA_H, AA_I, AA_L, AA_K, AA_M, AA_F, AA_P, AA_S, AA_T, AA_W, AA_Y, AA_V, AA_O, AA_U, AA_B, AA_J, AA_Z, AA_X, AA_Term, AA_Gap)\n\njulia  issorted(alphabet(AminoAcid))\ntrue  source  #  BioSymbols.gap     Method .  gap(AminoAcid)  Return  AA_Gap .  source  #  BioSymbols.isgap     Method .  isgap(aa::AminoAcid)  Test if  aa  is a gap.  source  #  BioSymbols.compatbits     Method .  compatbits(aa::AminoAcid)  Return the compatibility bits of  aa  as  UInt32 .  Examples  julia  compatbits(AA_A)\n0x00000001\n\njulia  compatbits(AA_J)\n0x00000600  source  #  BioSymbols.iscompatible     Method .  iscompatible(x::AminoAcid, y::AminoAcid)  Test if  x  and  y  are compatible with each other.  Examples  julia  iscompatible(AA_A, AA_R)\nfalse\n\njulia  iscompatible(AA_A, AA_X)\ntrue  source  #  BioSymbols.isambiguous     Method .  isambiguous(aa::AminoAcid)  Test if  aa  is an ambiguous amino acid.  source  #  BioSymbols.iscertain     Method .  iscertain(aa::AminoAcid)  Test if  aa  is a non-ambiguous amino acid.  source", 
            "title": "Functions"
        }
    ]
}