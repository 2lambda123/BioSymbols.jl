{
    "docs": [
        {
            "location": "/", 
            "text": "BioSymbols.jl Documentation\n\n\nBioSymbols.jl provides an abstract type and two concrete primitive types for julia which act as values representing nucleic acids and amino acids for bioinformatics and computational biology scripts and packages.\n\n\nThese types are compatible with other packages in the BioJulia software ecosystem.\n\n\n\n\nContents\n\n\n\n\nBiological Symbols\n\n\nNucleicAcids\n\n\nType definitions\n\n\nBit encoding\n\n\n\n\n\n\nAmino Acids\n\n\nFunctions", 
            "title": "Introduction"
        }, 
        {
            "location": "/#biosymbolsjl-documentation", 
            "text": "BioSymbols.jl provides an abstract type and two concrete primitive types for julia which act as values representing nucleic acids and amino acids for bioinformatics and computational biology scripts and packages.  These types are compatible with other packages in the BioJulia software ecosystem.", 
            "title": "BioSymbols.jl Documentation"
        }, 
        {
            "location": "/#contents", 
            "text": "Biological Symbols  NucleicAcids  Type definitions  Bit encoding    Amino Acids  Functions", 
            "title": "Contents"
        }, 
        {
            "location": "/types/", 
            "text": "Biological Symbols\n\n\n\n\nNucleicAcids\n\n\n\n\nType definitions\n\n\nBioSymbols provides two types of NucleicAcid:\n\n\n\n\n\n\n\n\nType\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\nDNA\n\n\nDNA nucleotide\n\n\n\n\n\n\nRNA\n\n\nRNA nucleotide\n\n\n\n\n\n\n\n\nThe set of nucleotide symbols in BioSymbols.jl covers the IUPAC nucleotides as well as a GAP (-) symbol.\n\n\n\n\n\n\n\n\nSymbol\n\n\nConstant\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\n'A'\n\n\nDNA_A\n / \nRNA_A\n\n\nA; Adenine\n\n\n\n\n\n\n'C'\n\n\nDNA_C\n / \nRNA_C\n\n\nC; Cytosine\n\n\n\n\n\n\n'G'\n\n\nDNA_G\n / \nRNA_G\n\n\nG; Guanine\n\n\n\n\n\n\n'T'\n\n\nDNA_T\n\n\nT; Thymine (DNA only)\n\n\n\n\n\n\n'U'\n\n\nRNA_U\n\n\nU; Uracil (RNA only)\n\n\n\n\n\n\n'M'\n\n\nDNA_M\n / \nRNA_M\n\n\nA or C\n\n\n\n\n\n\n'R'\n\n\nDNA_R\n / \nRNA_R\n\n\nA or G\n\n\n\n\n\n\n'W'\n\n\nDNA_W\n / \nRNA_W\n\n\nA or T/U\n\n\n\n\n\n\n'S'\n\n\nDNA_S\n / \nRNA_S\n\n\nC or G\n\n\n\n\n\n\n'Y'\n\n\nDNA_Y\n / \nRNA_Y\n\n\nC or T/U\n\n\n\n\n\n\n'K'\n\n\nDNA_K\n / \nRNA_K\n\n\nG or T/U\n\n\n\n\n\n\n'V'\n\n\nDNA_V\n / \nRNA_V\n\n\nA or C or G; not T/U\n\n\n\n\n\n\n'H'\n\n\nDNA_H\n / \nRNA_H\n\n\nA or C or T; not G\n\n\n\n\n\n\n'D'\n\n\nDNA_D\n / \nRNA_D\n\n\nA or G or T/U; not C\n\n\n\n\n\n\n'B'\n\n\nDNA_B\n / \nRNA_B\n\n\nC or G or T/U; not A\n\n\n\n\n\n\n'N'\n\n\nDNA_N\n / \nRNA_N\n\n\nA or C or G or T/U\n\n\n\n\n\n\n'-'\n\n\nDNA_Gap\n / \nRNA_Gap\n\n\nGap (none of the above)\n\n\n\n\n\n\n\n\nhttp://www.insdc.org/documents/feature_table.html#7.4.1\n\n\nThese are accessible as constants with \nDNA_\n or \nRNA_\n prefix:\n\n\njulia\n DNA_A\nDNA_A\n\njulia\n DNA_T\nDNA_T\n\njulia\n RNA_U\nRNA_U\n\njulia\n DNA_Gap\nDNA_Gap\n\njulia\n typeof(DNA_A)\nBioSymbols.DNA\n\njulia\n typeof(RNA_A)\nBioSymbols.RNA\n\n\n\n\n\nSymbols can be constructed by converting regular characters:\n\n\njulia\n convert(DNA, \nC\n)\nDNA_C\n\njulia\n convert(DNA, \nC\n) === DNA_C\ntrue\n\njulia\n convert(DNA, \nc\n) === convert(DNA, \nC\n)  # convertion is not case-sensitive\ntrue\n\n\n\n\n\nprint\n and \nshow\n methods are defined to output the text representation of a symbol:\n\n\njulia\n print(DNA_A)  # un-decorated text\nA\njulia\n show(DNA_A)   # informative text\nDNA_A\n\n\n\n\n\n\n\nBit encoding\n\n\nEvery nucleotide is encoded using the lower 4 bits of a byte. An unambiguous nucleotide has only one set bit and the other bits are unset. The table below summarizes all unambiguous nucleotides and their corresponding bits. An ambiguous nucleotide is the bitwise OR of unambiguous nucleotides that the ambiguous nucleotide can take. For example, \nDNA_R\n (meaning the nucleotide is either \nDNA_A\n or \nDNA_G\n) is encoded as \n0101\n because \n0101\n is the bitwise OR of \n0001\n (\nDNA_A\n) and \n0100\n (\nDNA_G\n). The gap symbol is always \n0000\n.\n\n\n\n\nAmino Acids\n\n\nSet of amino acid symbols also covers IUPAC amino acid symbols plus a gap symbol:\n\n\n\n\n\n\n\n\nSymbol\n\n\nConstant\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\n'A'\n\n\nAA_A\n\n\nAlanine\n\n\n\n\n\n\n'R'\n\n\nAA_R\n\n\nArginine\n\n\n\n\n\n\n'N'\n\n\nAA_N\n\n\nAsparagine\n\n\n\n\n\n\n'D'\n\n\nAA_D\n\n\nAspartic acid (Aspartate)\n\n\n\n\n\n\n'C'\n\n\nAA_C\n\n\nCysteine\n\n\n\n\n\n\n'Q'\n\n\nAA_Q\n\n\nGlutamine\n\n\n\n\n\n\n'E'\n\n\nAA_E\n\n\nGlutamic acid (Glutamate)\n\n\n\n\n\n\n'G'\n\n\nAA_G\n\n\nGlycine\n\n\n\n\n\n\n'H'\n\n\nAA_H\n\n\nHistidine\n\n\n\n\n\n\n'I'\n\n\nAA_I\n\n\nIsoleucine\n\n\n\n\n\n\n'L'\n\n\nAA_L\n\n\nLeucine\n\n\n\n\n\n\n'K'\n\n\nAA_K\n\n\nLysine\n\n\n\n\n\n\n'M'\n\n\nAA_M\n\n\nMethionine\n\n\n\n\n\n\n'F'\n\n\nAA_F\n\n\nPhenylalanine\n\n\n\n\n\n\n'P'\n\n\nAA_P\n\n\nProline\n\n\n\n\n\n\n'S'\n\n\nAA_S\n\n\nSerine\n\n\n\n\n\n\n'T'\n\n\nAA_T\n\n\nThreonine\n\n\n\n\n\n\n'W'\n\n\nAA_W\n\n\nTryptophan\n\n\n\n\n\n\n'Y'\n\n\nAA_Y\n\n\nTyrosine\n\n\n\n\n\n\n'V'\n\n\nAA_V\n\n\nValine\n\n\n\n\n\n\n'O'\n\n\nAA_O\n\n\nPyrrolysine\n\n\n\n\n\n\n'U'\n\n\nAA_U\n\n\nSelenocysteine\n\n\n\n\n\n\n'B'\n\n\nAA_B\n\n\nAspartic acid or Asparagine\n\n\n\n\n\n\n'J'\n\n\nAA_J\n\n\nLeucine or Isoleucine\n\n\n\n\n\n\n'Z'\n\n\nAA_Z\n\n\nGlutamine or Glutamic acid\n\n\n\n\n\n\n'X'\n\n\nAA_X\n\n\nAny amino acid\n\n\n\n\n\n\n'*'\n\n\nAA_Term\n\n\nTermination codon\n\n\n\n\n\n\n'-'\n\n\nAA_Gap\n\n\nGap (none of the above)\n\n\n\n\n\n\n\n\nhttp://www.insdc.org/documents/feature_table.html#7.4.3\n\n\nSymbols are accessible as constants with \nAA_\n prefix:\n\n\njulia\n AA_A\nAA_A\n\njulia\n AA_Q\nAA_Q\n\njulia\n AA_Term\nAA_Term\n\njulia\n typeof(AA_A)\nBioSymbols.AminoAcid\n\n\n\n\n\nSymbols can be constructed by converting regular characters:\n\n\njulia\n convert(AminoAcid, \nA\n)\nAA_A\n\njulia\n convert(AminoAcid, \nP\n) === AA_P\ntrue\n\njulia\n convert(AminoAcid, \na\n) === convert(AminoAcid, \nA\n)\ntrue\n\n\n\n\n\n\n\nFunctions\n\n\n#\n\n\nBioSymbols.alphabet\n \n \nFunction\n.\n\n\nalphabet(type)\n\n\n\n\n\nGet all symbols of \ntype\n.\n\n\nExamples\n\n\njulia\n alphabet(DNA)\n(DNA_Gap, DNA_A, DNA_C, DNA_M, DNA_G, DNA_R, DNA_S, DNA_V, DNA_T, DNA_W, DNA_Y, DNA_H, DNA_K, DNA_D, DNA_B, DNA_N)\n\njulia\n issorted(alphabet(DNA))\ntrue\n\n\n\n\n\nsource\n\n\n#\n\n\nBioSymbols.gap\n \n \nFunction\n.\n\n\ngap(type)\n\n\n\n\n\nReturn the gap value of \ntype\n.\n\n\nExamples\n\n\njulia\n gap(DNA)\nDNA_Gap\n\n\n\n\n\nsource\n\n\n#\n\n\nBioSymbols.compatbits\n \n \nFunction\n.\n\n\ncompatbits(nt::NucleicAcid)\n\n\n\n\n\nReturn the compatibility bits of \nnt\n as \nUInt8\n.\n\n\nExamples\n\n\njulia\n compatbits(DNA_A)\n0x01\n\njulia\n compatbits(DNA_C)\n0x02\n\njulia\n compatbits(DNA_N)\n0x0f\n\n\n\n\n\nsource\n\n\ncompatbits(aa::AminoAcid)\n\n\n\n\n\nReturn the compatibility bits of \naa\n as \nUInt32\n.\n\n\nExamples\n\n\njulia\n compatbits(AA_A)\n0x00000001\n\njulia\n compatbits(AA_J)\n0x00000600\n\n\n\n\n\nsource\n\n\n#\n\n\nBioSymbols.complement\n \n \nFunction\n.\n\n\ncomplement(nt::NucleicAcid)\n\n\n\n\n\nReturn the complementary nucleotide of \nnt\n.\n\n\nThis function returns the union of all possible complementary nucleotides.\n\n\nExamples\n\n\njulia\n complement(DNA_A)\nDNA_T\n\njulia\n complement(DNA_N)\nDNA_N\n\njulia\n complement(RNA_U)\nRNA_A\n\n\n\n\n\nsource\n\n\n#\n\n\nBioSymbols.isgap\n \n \nFunction\n.\n\n\nisgap(nt::NucleicAcid)\n\n\n\n\n\nTest if \nnt\n is a gap.\n\n\nsource\n\n\n#\n\n\nBioSymbols.iscompatible\n \n \nFunction\n.\n\n\niscompatible(x, y)\n\n\n\n\n\nTest if \nx\n and \ny\n are compatible with each other (i.e. \nx\n and \ny\n can be the same symbol).\n\n\nx\n and \ny\n must be the same type (\nDNA\n, \nRNA\n or \nAminoAcid\n).\n\n\nExamples\n\n\njulia\n iscompatible(DNA_A, DNA_A)\ntrue\n\njulia\n iscompatible(DNA_C, DNA_N)  # DNA_N can be DNA_C\ntrue\n\njulia\n iscompatible(DNA_C, DNA_R)  # DNA_R (A or G) cannot be DNA_C\nfalse\n\njulia\n iscompatible(AA_A, AA_X)    # AA_X can be AA_A\ntrue\n\n\n\n\n\nsource\n\n\n#\n\n\nBioSymbols.isGC\n \n \nFunction\n.\n\n\nisGC(nt::NucleicAcid)\n\n\n\n\n\nTest if \nnt\n is surely either guanine or cytosine.\n\n\nsource\n\n\n#\n\n\nBioSymbols.ispurine\n \n \nFunction\n.\n\n\nispurine(nt::NucleicAcid)\n\n\n\n\n\nTest if \nnt\n is surely a purine.\n\n\nsource\n\n\n#\n\n\nBioSymbols.ispyrimidine\n \n \nFunction\n.\n\n\nispyrimidine(nt::NucleicAcid)\n\n\n\n\n\nTest if \nnt\n is surely a pyrimidine.\n\n\nsource\n\n\n#\n\n\nBioSymbols.isambiguous\n \n \nFunction\n.\n\n\nisambiguous(nt::NucleicAcid)\n\n\n\n\n\nTest if \nnt\n is ambiguous nucleotide.\n\n\nsource\n\n\n#\n\n\nBioSymbols.iscertain\n \n \nFunction\n.\n\n\niscertain(nt::NucleicAcid)\n\n\n\n\n\nTest if \nnt\n is a non-ambiguous nucleotide e.g. ACGT.\n\n\nsource", 
            "title": "Biological Symbol Types"
        }, 
        {
            "location": "/types/#biological-symbols", 
            "text": "", 
            "title": "Biological Symbols"
        }, 
        {
            "location": "/types/#nucleicacids", 
            "text": "", 
            "title": "NucleicAcids"
        }, 
        {
            "location": "/types/#type-definitions", 
            "text": "BioSymbols provides two types of NucleicAcid:     Type  Meaning      DNA  DNA nucleotide    RNA  RNA nucleotide     The set of nucleotide symbols in BioSymbols.jl covers the IUPAC nucleotides as well as a GAP (-) symbol.     Symbol  Constant  Meaning      'A'  DNA_A  /  RNA_A  A; Adenine    'C'  DNA_C  /  RNA_C  C; Cytosine    'G'  DNA_G  /  RNA_G  G; Guanine    'T'  DNA_T  T; Thymine (DNA only)    'U'  RNA_U  U; Uracil (RNA only)    'M'  DNA_M  /  RNA_M  A or C    'R'  DNA_R  /  RNA_R  A or G    'W'  DNA_W  /  RNA_W  A or T/U    'S'  DNA_S  /  RNA_S  C or G    'Y'  DNA_Y  /  RNA_Y  C or T/U    'K'  DNA_K  /  RNA_K  G or T/U    'V'  DNA_V  /  RNA_V  A or C or G; not T/U    'H'  DNA_H  /  RNA_H  A or C or T; not G    'D'  DNA_D  /  RNA_D  A or G or T/U; not C    'B'  DNA_B  /  RNA_B  C or G or T/U; not A    'N'  DNA_N  /  RNA_N  A or C or G or T/U    '-'  DNA_Gap  /  RNA_Gap  Gap (none of the above)     http://www.insdc.org/documents/feature_table.html#7.4.1  These are accessible as constants with  DNA_  or  RNA_  prefix:  julia  DNA_A\nDNA_A\n\njulia  DNA_T\nDNA_T\n\njulia  RNA_U\nRNA_U\n\njulia  DNA_Gap\nDNA_Gap\n\njulia  typeof(DNA_A)\nBioSymbols.DNA\n\njulia  typeof(RNA_A)\nBioSymbols.RNA  Symbols can be constructed by converting regular characters:  julia  convert(DNA,  C )\nDNA_C\n\njulia  convert(DNA,  C ) === DNA_C\ntrue\n\njulia  convert(DNA,  c ) === convert(DNA,  C )  # convertion is not case-sensitive\ntrue  print  and  show  methods are defined to output the text representation of a symbol:  julia  print(DNA_A)  # un-decorated text\nA\njulia  show(DNA_A)   # informative text\nDNA_A", 
            "title": "Type definitions"
        }, 
        {
            "location": "/types/#bit-encoding", 
            "text": "Every nucleotide is encoded using the lower 4 bits of a byte. An unambiguous nucleotide has only one set bit and the other bits are unset. The table below summarizes all unambiguous nucleotides and their corresponding bits. An ambiguous nucleotide is the bitwise OR of unambiguous nucleotides that the ambiguous nucleotide can take. For example,  DNA_R  (meaning the nucleotide is either  DNA_A  or  DNA_G ) is encoded as  0101  because  0101  is the bitwise OR of  0001  ( DNA_A ) and  0100  ( DNA_G ). The gap symbol is always  0000 .", 
            "title": "Bit encoding"
        }, 
        {
            "location": "/types/#amino-acids", 
            "text": "Set of amino acid symbols also covers IUPAC amino acid symbols plus a gap symbol:     Symbol  Constant  Meaning      'A'  AA_A  Alanine    'R'  AA_R  Arginine    'N'  AA_N  Asparagine    'D'  AA_D  Aspartic acid (Aspartate)    'C'  AA_C  Cysteine    'Q'  AA_Q  Glutamine    'E'  AA_E  Glutamic acid (Glutamate)    'G'  AA_G  Glycine    'H'  AA_H  Histidine    'I'  AA_I  Isoleucine    'L'  AA_L  Leucine    'K'  AA_K  Lysine    'M'  AA_M  Methionine    'F'  AA_F  Phenylalanine    'P'  AA_P  Proline    'S'  AA_S  Serine    'T'  AA_T  Threonine    'W'  AA_W  Tryptophan    'Y'  AA_Y  Tyrosine    'V'  AA_V  Valine    'O'  AA_O  Pyrrolysine    'U'  AA_U  Selenocysteine    'B'  AA_B  Aspartic acid or Asparagine    'J'  AA_J  Leucine or Isoleucine    'Z'  AA_Z  Glutamine or Glutamic acid    'X'  AA_X  Any amino acid    '*'  AA_Term  Termination codon    '-'  AA_Gap  Gap (none of the above)     http://www.insdc.org/documents/feature_table.html#7.4.3  Symbols are accessible as constants with  AA_  prefix:  julia  AA_A\nAA_A\n\njulia  AA_Q\nAA_Q\n\njulia  AA_Term\nAA_Term\n\njulia  typeof(AA_A)\nBioSymbols.AminoAcid  Symbols can be constructed by converting regular characters:  julia  convert(AminoAcid,  A )\nAA_A\n\njulia  convert(AminoAcid,  P ) === AA_P\ntrue\n\njulia  convert(AminoAcid,  a ) === convert(AminoAcid,  A )\ntrue", 
            "title": "Amino Acids"
        }, 
        {
            "location": "/types/#functions", 
            "text": "#  BioSymbols.alphabet     Function .  alphabet(type)  Get all symbols of  type .  Examples  julia  alphabet(DNA)\n(DNA_Gap, DNA_A, DNA_C, DNA_M, DNA_G, DNA_R, DNA_S, DNA_V, DNA_T, DNA_W, DNA_Y, DNA_H, DNA_K, DNA_D, DNA_B, DNA_N)\n\njulia  issorted(alphabet(DNA))\ntrue  source  #  BioSymbols.gap     Function .  gap(type)  Return the gap value of  type .  Examples  julia  gap(DNA)\nDNA_Gap  source  #  BioSymbols.compatbits     Function .  compatbits(nt::NucleicAcid)  Return the compatibility bits of  nt  as  UInt8 .  Examples  julia  compatbits(DNA_A)\n0x01\n\njulia  compatbits(DNA_C)\n0x02\n\njulia  compatbits(DNA_N)\n0x0f  source  compatbits(aa::AminoAcid)  Return the compatibility bits of  aa  as  UInt32 .  Examples  julia  compatbits(AA_A)\n0x00000001\n\njulia  compatbits(AA_J)\n0x00000600  source  #  BioSymbols.complement     Function .  complement(nt::NucleicAcid)  Return the complementary nucleotide of  nt .  This function returns the union of all possible complementary nucleotides.  Examples  julia  complement(DNA_A)\nDNA_T\n\njulia  complement(DNA_N)\nDNA_N\n\njulia  complement(RNA_U)\nRNA_A  source  #  BioSymbols.isgap     Function .  isgap(nt::NucleicAcid)  Test if  nt  is a gap.  source  #  BioSymbols.iscompatible     Function .  iscompatible(x, y)  Test if  x  and  y  are compatible with each other (i.e.  x  and  y  can be the same symbol).  x  and  y  must be the same type ( DNA ,  RNA  or  AminoAcid ).  Examples  julia  iscompatible(DNA_A, DNA_A)\ntrue\n\njulia  iscompatible(DNA_C, DNA_N)  # DNA_N can be DNA_C\ntrue\n\njulia  iscompatible(DNA_C, DNA_R)  # DNA_R (A or G) cannot be DNA_C\nfalse\n\njulia  iscompatible(AA_A, AA_X)    # AA_X can be AA_A\ntrue  source  #  BioSymbols.isGC     Function .  isGC(nt::NucleicAcid)  Test if  nt  is surely either guanine or cytosine.  source  #  BioSymbols.ispurine     Function .  ispurine(nt::NucleicAcid)  Test if  nt  is surely a purine.  source  #  BioSymbols.ispyrimidine     Function .  ispyrimidine(nt::NucleicAcid)  Test if  nt  is surely a pyrimidine.  source  #  BioSymbols.isambiguous     Function .  isambiguous(nt::NucleicAcid)  Test if  nt  is ambiguous nucleotide.  source  #  BioSymbols.iscertain     Function .  iscertain(nt::NucleicAcid)  Test if  nt  is a non-ambiguous nucleotide e.g. ACGT.  source", 
            "title": "Functions"
        }
    ]
}