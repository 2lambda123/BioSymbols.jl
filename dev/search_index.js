var documenterSearchIndex = {"docs":
[{"location":"#img-src\"./sticker.svg\"-width\"30%\"-align\"right\"/-BioSymbols-1","page":"Home","title":"<img src=\"./sticker.svg\" width=\"30%\" align=\"right\"/> BioSymbols","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"(Image: Latest release) (Image: MIT license)  (Image: Stable documentation) (Image: Latest documentation) (Image: Pkg Status) (Image: Chat)","category":"page"},{"location":"#Description-1","page":"Home","title":"Description","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"BioSymbols defines the primitive types for nucleic acids and amino acids that are used for many other packages in the BioJulia software ecosystem.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"BioSymbols is bundled into BioSequences and so you may not need to install this package explicitly.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"BioSymbols is made available to install through BioJulia's package registry.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Julia by default only watches the \"General\" package registry, so before you start, you should add the BioJulia package registry.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Start a julia terminal, hit the ] key to enter pkg mode (you should see the prompt change from julia> to pkg>), then enter the following command:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"registry add https://github.com/BioJulia/BioJuliaRegistry.git","category":"page"},{"location":"#","page":"Home","title":"Home","text":"After you've added the registry, you can install BioSymbols from the julia REPL. Press ] to enter pkg mode again, and enter the following:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"add BioSymbols","category":"page"},{"location":"#","page":"Home","title":"Home","text":"If you are interested in the cutting edge of the development, please check out the master branch to try new features before release.","category":"page"},{"location":"#Testing-1","page":"Home","title":"Testing","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"BioSymbols is tested against Julia 1.X on Linux, OS X, and Windows.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"#Contributing-1","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"We appreciate contributions from users including reporting bugs, fixing issues, improving performance and adding new features.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Take a look at the contributing files detailed contributor and maintainer guidelines, and code of conduct.","category":"page"},{"location":"#Financial-contributions-1","page":"Home","title":"Financial contributions","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"We also welcome financial contributions in full transparency on our open collective. Anyone can file an expense. If the expense makes sense for the development of the community, it will be \"merged\" in the ledger of our open collective by the core contributors and the person who filed the expense will be reimbursed.","category":"page"},{"location":"#Backers-and-Sponsors-1","page":"Home","title":"Backers & Sponsors","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Thank you to all our backers and sponsors!","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Love our work and community? Become a backer.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: backers)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Does your company use BioJulia? Help keep BioJulia feature rich and healthy by sponsoring the project Your logo will show up here with a link to your website.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"#Questions?-1","page":"Home","title":"Questions?","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"If you have a question about contributing or using BioJulia software, come on over and chat to us on Gitter, or you can try the Bio category of the Julia discourse site.","category":"page"},{"location":"nucleicacids/#","page":"Nucleic Acids","title":"Nucleic Acids","text":"CurrentModule = BioSymbols\nDocTestSetup = quote\n    using BioSymbols\nend","category":"page"},{"location":"nucleicacids/#Nucleic-Acids-1","page":"Nucleic Acids","title":"Nucleic Acids","text":"","category":"section"},{"location":"nucleicacids/#Type-definitions-1","page":"Nucleic Acids","title":"Type definitions","text":"","category":"section"},{"location":"nucleicacids/#","page":"Nucleic Acids","title":"Nucleic Acids","text":"BioSymbols provides two types of nucleic acids:","category":"page"},{"location":"nucleicacids/#","page":"Nucleic Acids","title":"Nucleic Acids","text":"Type Meaning\nDNA deoxyribonucleic acid\nRNA ribonucleic acid","category":"page"},{"location":"nucleicacids/#","page":"Nucleic Acids","title":"Nucleic Acids","text":"These two are an 8-bit primitive type and a subtype of NucleicAcid.","category":"page"},{"location":"nucleicacids/#","page":"Nucleic Acids","title":"Nucleic Acids","text":"julia> sizeof(DNA)\n1\n\njulia> DNA <: NucleicAcid\ntrue\n","category":"page"},{"location":"nucleicacids/#","page":"Nucleic Acids","title":"Nucleic Acids","text":"The set of nucleotide symbols in BioSymbols.jl covers the IUPAC nucleotides as well as a GAP (-) symbol.","category":"page"},{"location":"nucleicacids/#","page":"Nucleic Acids","title":"Nucleic Acids","text":"Symbol Constant Meaning\n'A' DNA_A / RNA_A A; Adenine\n'C' DNA_C / RNA_C C; Cytosine\n'G' DNA_G / RNA_G G; Guanine\n'T' DNA_T T; Thymine (DNA only)\n'U' RNA_U U; Uracil (RNA only)\n'M' DNA_M / RNA_M A or C\n'R' DNA_R / RNA_R A or G\n'W' DNA_W / RNA_W A or T/U\n'S' DNA_S / RNA_S C or G\n'Y' DNA_Y / RNA_Y C or T/U\n'K' DNA_K / RNA_K G or T/U\n'V' DNA_V / RNA_V A or C or G; not T/U\n'H' DNA_H / RNA_H A or C or T; not G\n'D' DNA_D / RNA_D A or G or T/U; not C\n'B' DNA_B / RNA_B C or G or T/U; not A\n'N' DNA_N / RNA_N A or C or G or T/U\n'-' DNA_Gap / RNA_Gap Gap (none of the above)","category":"page"},{"location":"nucleicacids/#","page":"Nucleic Acids","title":"Nucleic Acids","text":"http://www.insdc.org/documents/feature_table.html#7.4.1","category":"page"},{"location":"nucleicacids/#","page":"Nucleic Acids","title":"Nucleic Acids","text":"These are accessible as constants with DNA_ or RNA_ prefix:","category":"page"},{"location":"nucleicacids/#","page":"Nucleic Acids","title":"Nucleic Acids","text":"julia> DNA_A\nDNA_A\n\njulia> DNA_T\nDNA_T\n\njulia> RNA_U\nRNA_U\n\njulia> DNA_Gap\nDNA_Gap\n\njulia> typeof(DNA_A)\nDNA\n\njulia> typeof(RNA_A)\nRNA\n","category":"page"},{"location":"nucleicacids/#","page":"Nucleic Acids","title":"Nucleic Acids","text":"Symbols can be constructed by converting regular characters:","category":"page"},{"location":"nucleicacids/#","page":"Nucleic Acids","title":"Nucleic Acids","text":"julia> convert(DNA, 'C')\nDNA_C\n\njulia> convert(DNA, 'C') === DNA_C\ntrue\n\njulia> convert(DNA, 'c') === convert(DNA, 'C')  # convertion is not case-sensitive\ntrue\n","category":"page"},{"location":"nucleicacids/#","page":"Nucleic Acids","title":"Nucleic Acids","text":"print and show methods are defined to output the text representation of a symbol:","category":"page"},{"location":"nucleicacids/#","page":"Nucleic Acids","title":"Nucleic Acids","text":"julia> print(DNA_A)  # un-decorated text\nA\njulia> show(DNA_A)   # informative text\nDNA_A","category":"page"},{"location":"nucleicacids/#Bit-encoding-1","page":"Nucleic Acids","title":"Bit encoding","text":"","category":"section"},{"location":"nucleicacids/#","page":"Nucleic Acids","title":"Nucleic Acids","text":"Every nucleotide is encoded using the lower 4 bits of a byte. An unambiguous nucleotide has only one set bit and the other bits are unset. The table below summarizes all unambiguous nucleotides and their corresponding bits. An ambiguous nucleotide is the bitwise OR of unambiguous nucleotides that the ambiguous nucleotide can take. For example, DNA_R (meaning the nucleotide is either DNA_A or DNA_G) is encoded as 0101 because 0101 is the bitwise OR of 0001 (DNA_A) and 0100 (DNA_G). The gap symbol is always 0000.","category":"page"},{"location":"nucleicacids/#","page":"Nucleic Acids","title":"Nucleic Acids","text":"julia> bitstring(reinterpret(UInt8, DNA_A))\n\"00000001\"\n\njulia> bitstring(reinterpret(UInt8, DNA_G))\n\"00000100\"\n\njulia> bitstring(reinterpret(UInt8, DNA_R))\n\"00000101\"\n","category":"page"},{"location":"nucleicacids/#","page":"Nucleic Acids","title":"Nucleic Acids","text":"This bit encoding enables efficient bit operations:","category":"page"},{"location":"nucleicacids/#","page":"Nucleic Acids","title":"Nucleic Acids","text":"julia> DNA_A | DNA_G  # A or G\nDNA_R\n\njulia> DNA_A & DNA_G  # A and G\nDNA_Gap\n\njulia> DNA_A | ~DNA_A  # A or not A\nDNA_N\n\njulia> DNA_A | DNA_C | DNA_G | DNA_T  # any DNA\nDNA_N\n","category":"page"},{"location":"aminoacids/#","page":"Amino Acids","title":"Amino Acids","text":"CurrentModule = BioSymbols\nDocTestSetup = quote\n    using BioSymbols\nend","category":"page"},{"location":"aminoacids/#Amino-Acids-1","page":"Amino Acids","title":"Amino Acids","text":"","category":"section"},{"location":"aminoacids/#","page":"Amino Acids","title":"Amino Acids","text":"Set of amino acid symbols also covers IUPAC amino acid symbols plus a gap symbol:","category":"page"},{"location":"aminoacids/#","page":"Amino Acids","title":"Amino Acids","text":"Symbol Constant Meaning\n'A' AA_A Alanine\n'R' AA_R Arginine\n'N' AA_N Asparagine\n'D' AA_D Aspartic acid (Aspartate)\n'C' AA_C Cysteine\n'Q' AA_Q Glutamine\n'E' AA_E Glutamic acid (Glutamate)\n'G' AA_G Glycine\n'H' AA_H Histidine\n'I' AA_I Isoleucine\n'L' AA_L Leucine\n'K' AA_K Lysine\n'M' AA_M Methionine\n'F' AA_F Phenylalanine\n'P' AA_P Proline\n'S' AA_S Serine\n'T' AA_T Threonine\n'W' AA_W Tryptophan\n'Y' AA_Y Tyrosine\n'V' AA_V Valine\n'O' AA_O Pyrrolysine\n'U' AA_U Selenocysteine\n'B' AA_B Aspartic acid or Asparagine\n'J' AA_J Leucine or Isoleucine\n'Z' AA_Z Glutamine or Glutamic acid\n'X' AA_X Any amino acid\n'*' AA_Term Termination codon\n'-' AA_Gap Gap (none of the above)","category":"page"},{"location":"aminoacids/#","page":"Amino Acids","title":"Amino Acids","text":"http://www.insdc.org/documents/feature_table.html#7.4.3","category":"page"},{"location":"aminoacids/#","page":"Amino Acids","title":"Amino Acids","text":"Symbols are accessible as constants with AA_ prefix:","category":"page"},{"location":"aminoacids/#","page":"Amino Acids","title":"Amino Acids","text":"julia> AA_A\nAA_A\n\njulia> AA_Q\nAA_Q\n\njulia> AA_Term\nAA_Term\n\njulia> typeof(AA_A)\nAminoAcid\n","category":"page"},{"location":"aminoacids/#","page":"Amino Acids","title":"Amino Acids","text":"Symbols can be constructed by converting regular characters:","category":"page"},{"location":"aminoacids/#","page":"Amino Acids","title":"Amino Acids","text":"julia> convert(AminoAcid, 'A')\nAA_A\n\njulia> convert(AminoAcid, 'P') === AA_P\ntrue\n\njulia> convert(AminoAcid, 'a') === convert(AminoAcid, 'A')\ntrue\n","category":"page"},{"location":"aminoacids/#","page":"Amino Acids","title":"Amino Acids","text":"3-letter and 1-letter abbreviations can be parsed using parse in a case-insensitive way:","category":"page"},{"location":"aminoacids/#","page":"Amino Acids","title":"Amino Acids","text":"julia> parse(AminoAcid, \"Pro\")  # 3-letter abbreviation\nAA_P\n\njulia> parse(AminoAcid, \"P\")    # 1-letter abbreviation\nAA_P\n\njulia> parse(AminoAcid, \"Pro\") == parse(AminoAcid, \"pRo\")\ntrue\n\njulia> tryparse(AminoAcid, \"Pro\")  # tryparse returns either an amino acid or nothing\nAA_P\n\njulia> tryparse(AminoAcid, \"Pr\")\n\n","category":"page"},{"location":"sequences/#","page":"Sequences","title":"Sequences","text":"CurrentModule = BioSymbols\nDocTestSetup = quote\n    using BioSymbols\nend","category":"page"},{"location":"sequences/#Sequences-1","page":"Sequences","title":"Sequences","text":"","category":"section"},{"location":"sequences/#Using-Vector-1","page":"Sequences","title":"Using Vector","text":"","category":"section"},{"location":"sequences/#","page":"Sequences","title":"Sequences","text":"A quick way to create a DNA/RNA sequence is storing symbols in a vector.","category":"page"},{"location":"sequences/#","page":"Sequences","title":"Sequences","text":"julia> seq = [DNA_A, DNA_C, DNA_G, DNA_T]\n4-element Array{DNA,1}:\n DNA_A\n DNA_C\n DNA_G\n DNA_T\n\njulia> [convert(DNA, x) for x in \"ACGT\"]  # from a string\n4-element Array{DNA,1}:\n DNA_A\n DNA_C\n DNA_G\n DNA_T\n","category":"page"},{"location":"sequences/#Using-Tuple-1","page":"Sequences","title":"Using Tuple","text":"","category":"section"},{"location":"sequences/#","page":"Sequences","title":"Sequences","text":"Julia offers a tuple type to represent multiple values in a value. It is similar to Vector but is significantly different in some points. First, Tuple is immutable while Vector is mutable. So you cannot update elements in a tuple once created. Second, a tuple type is parameterized by its length. That means it is inefficient to represent variable-length sequences in tuple due to type instability problem.","category":"page"},{"location":"sequences/#","page":"Sequences","title":"Sequences","text":"julia> (RNA_A, RNA_U, RNA_C)  # RNA triplet (or codon)\n(RNA_A, RNA_U, RNA_C)\n","category":"page"},{"location":"sequences/#Using-BioSequences.jl-1","page":"Sequences","title":"Using BioSequences.jl","text":"","category":"section"},{"location":"sequences/#","page":"Sequences","title":"Sequences","text":"Using Vector or Tuple is simple, however, BioSymbols does not offer useful operations for these representations. So you need to use built-in operations of Julia or other packages. Moreover, these representations are not necessarily efficient. For example, DNA is an 8-bit primitive but it only uses 4 bits, which means 50% of a Vector{DNA}'s space is not used at all.","category":"page"},{"location":"sequences/#","page":"Sequences","title":"Sequences","text":"For the purpose of representing sequences as efficient as possible BioJulia has developed BioSequences.jl package. The BioSequence type of BioSequences.jl is able to represent a DNA/RNA sequence in 2 or 4 bits per symbol. It also offers many efficient algorithms and I/O tools for common file formats such as FASTA.","category":"page"},{"location":"lib/public/#","page":"Public","title":"Public","text":"CurrentModule = BioSymbols\nDocTestSetup = quote\n    using BioSymbols\nend","category":"page"},{"location":"lib/public/#Public-Documentation-1","page":"Public","title":"Public Documentation","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Documentation for BioSymbols.jl's public interface.","category":"page"},{"location":"lib/public/#","page":"Public","title":"Public","text":"See Internal Documentation for internal package docs.","category":"page"},{"location":"lib/public/#Contents-1","page":"Public","title":"Contents","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"lib/public/#Index-1","page":"Public","title":"Index","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"lib/public/#Public-Interface-1","page":"Public","title":"Public Interface","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Modules = [BioSymbols]\nPrivate = false\nOrder = [:type, :function]","category":"page"},{"location":"lib/public/#BioSymbols.iscompatible-Union{Tuple{S}, Tuple{S,S}} where S<:BioSymbols.BioSymbol","page":"Public","title":"BioSymbols.iscompatible","text":"iscompatible(x::S, y::S) where S <: BioSymbol\n\nTest if x and y are compatible with each other.\n\nExamples\n\njulia> iscompatible(AA_A, AA_R)\nfalse\n\njulia> iscompatible(AA_A, AA_X)\ntrue\n\njulia> iscompatible(DNA_A, DNA_A)\ntrue\n\njulia> iscompatible(DNA_C, DNA_N)  # DNA_N can be DNA_C\ntrue\n\njulia> iscompatible(DNA_C, DNA_R)  # DNA_R (A or G) cannot be DNA_C\nfalse\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#BioSymbols.isgap-Tuple{BioSymbols.BioSymbol}","page":"Public","title":"BioSymbols.isgap","text":"isgap(symbol::BioSymbol)\n\nTest if symbol is a gap.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Internal-Documentation-1","page":"Internals","title":"Internal Documentation","text":"","category":"section"},{"location":"lib/internals/#","page":"Internals","title":"Internals","text":"This page lists all the documented internals of the BioSymbols module.","category":"page"},{"location":"lib/internals/#Contents-1","page":"Internals","title":"Contents","text":"","category":"section"},{"location":"lib/internals/#","page":"Internals","title":"Internals","text":"Pages = [joinpath(\"internals\", f) for f in readdir(\"internals\")]","category":"page"},{"location":"lib/internals/#Index-1","page":"Internals","title":"Index","text":"","category":"section"},{"location":"lib/internals/#","page":"Internals","title":"Internals","text":"A list of all internal documentation.","category":"page"},{"location":"lib/internals/#","page":"Internals","title":"Internals","text":"Pages = [joinpath(\"internals\", f) for f in readdir(\"internals\")]","category":"page"},{"location":"lib/internals/conversion-tables/#Conversion-tables-1","page":"Conversion tables","title":"Conversion tables","text":"","category":"section"},{"location":"lib/internals/conversion-tables/#","page":"Conversion tables","title":"Conversion tables","text":"BioSymbols.char_to_dna\nBioSymbols.dna_to_char\nBioSymbols.char_to_rna\nBioSymbols.rna_to_char","category":"page"},{"location":"lib/internals/conversion-tables/#BioSymbols.char_to_dna","page":"Conversion tables","title":"BioSymbols.char_to_dna","text":"Lookup table used for converting characters to DNA symbol values\n\nThe provided convert method should be used rather than this table, but you can use it if you insist and know what your are doing.\n\nnote: Note\nThe array is indexed by converting a character to an integer. When indexed, it returns a UInt8 with the bit pattern on the corresponding nucleic acid. The convert(DNA, x) method does this for you.\n\nwarning: Warning\nIf you index this array with a character that is greater than 'ÿ', then you will get a bounds error. The convert(DNA, x) method checks such things to avoid this for you.\n\nwarning: Warning\nIf you index this array with a character that does not have a corresonding DNA symbol, then you get a byte with the bit pattern 0x80, which is an invalid DNA symbol and will be of no use to you. The convert(DNA, x) checks such things for you and throws an exception gracefully if such a situation arises.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/conversion-tables/#BioSymbols.dna_to_char","page":"Conversion tables","title":"BioSymbols.dna_to_char","text":"Lookup table for converting DNA symbol values to characters\n\nThe provided convert method should be used rather than this table, but you can use it if you insist and know what your are doing.\n\nnote: Note\nThe array is indexed by reinterpreting a DNA symbol value as an UInt8. When indexed, it returns the character corresponding to the symbol. The convert(Char, x::DNA) method does this for you.\n\nwarning: Warning\nIf you index this array with an invalid DNA symbol, then you will hit a bounds error. If you construct DNA symbols properly, then this scenario should never occur. \n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/conversion-tables/#BioSymbols.char_to_rna","page":"Conversion tables","title":"BioSymbols.char_to_rna","text":"Lookup table used for converting characters to RNA symbol values\n\nThe provided convert method should be used rather than this table, but you can use it if you insist and know what your are doing.\n\nnote: Note\nThe array is indexed by converting a character to an integer. When indexed, it returns a UInt8 with the bit pattern on the corresponding nucleic acid. The convert(RNA, x) method does this for you.\n\nwarning: Warning\nIf you index this array with a character that is greater than 'ÿ', then you will get a bounds error. The convert(RNA, x) method checks such things to avoid this for you.\n\nwarning: Warning\nIf you index this array with a character that does not have a corresonding RNA symbol, then you get a byte with the bit pattern 0x80, which is an invalid RNA symbol and will be of no use to you. The convert(RNA, x) checks such things for you and throws an exception gracefully if such a situation arises.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/conversion-tables/#BioSymbols.rna_to_char","page":"Conversion tables","title":"BioSymbols.rna_to_char","text":"Lookup table for converting RNA symbol values to characters\n\nThe provided convert method should be used rather than this table, but you can use it if you insist and know what your are doing.\n\nnote: Note\nThe array is indexed by reinterpreting a RNA symbol value as an UInt8. When indexed, it returns the character corresponding to the symbol. The convert(Char, x::RNA) method does this for you.\n\nwarning: Warning\nIf you index this array with an invalid RNA symbol, then you will hit a bounds error. If you construct RNA symbols properly, then this scenario should never occur. \n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/nucleic-acid-encoding/#Bit-encoding-of-nucleic-acid-types-1","page":"Bit encoding of nucleic acid types","title":"Bit encoding of nucleic acid types","text":"","category":"section"},{"location":"lib/internals/nucleic-acid-encoding/#","page":"Bit encoding of nucleic acid types","title":"Bit encoding of nucleic acid types","text":"Unambiguous nucleotides are represented in one-hot encoding as follows:","category":"page"},{"location":"lib/internals/nucleic-acid-encoding/#","page":"Bit encoding of nucleic acid types","title":"Bit encoding of nucleic acid types","text":"NucleicAcid Bits\nA 0001\nC 0010\nG 0100\nT/U 1000","category":"page"},{"location":"lib/internals/nucleic-acid-encoding/#","page":"Bit encoding of nucleic acid types","title":"Bit encoding of nucleic acid types","text":"Ambiguous nucleotides are the bitwise OR of these four nucleotides. For example, R, A or G, is represented as 0101 (= A: 0001 | G: 0100). The gap symbol is always 0000. The meaningful four bits are stored in the least significant bits of a byte.","category":"page"},{"location":"lib/internals/nucleic-acid-encoding/#","page":"Bit encoding of nucleic acid types","title":"Bit encoding of nucleic acid types","text":"This encoding applies to both the DNA and RNA types.","category":"page"}]
}
